#include "xparameters.h"
#include "xgpio.h"
#include "xstatus.h"
#include "xspi.h"
#include "LCD_SPI.h"
#include "LCD_Driver.h"
#include "LCD_GUI.h"
#include "ADC.h"
#include "I2C.h"
#include "globals.h"
#include "timers.h"

int init_project()
{
    int Status;

    init_platform();

    Status = XGpio_Initialize(&gpio0, XPAR_AXI_GPIO_0_DEVICE_ID);
    if (Status != XST_SUCCESS) {
        xil_printf("Gpio 0 Initialization Failed\r\n");
        return XST_FAILURE;
    }

    Status = XGpio_Initialize(&gpio1, XPAR_AXI_GPIO_1_DEVICE_ID);
    if (Status != XST_SUCCESS) {
        xil_printf("Gpio 1 Initialization Failed\r\n");
        return XST_FAILURE;
    }

    Status = XSpi_Init(&SpiInstance, SPI_DEVICE_ID);
    if (Status != XST_SUCCESS) {
        xil_printf("SPI Mode Failed\r\n");
        return XST_FAILURE;
    }

    Status = init_adc(&SpiInstance1, SPI_DEVICE_ID_1);
    if (Status != XST_SUCCESS) {
        xil_printf("SPI-ADC Mode Failed\r\n");
        return XST_FAILURE;
    }

    Status = init_IIC();
    if (Status != XST_SUCCESS) {
        xil_printf("IIC Mode Failed\r\n");
        return XST_FAILURE;
    }

    Status = XTmrCtr_Initialize(&TmrMusic, TMR_DEVICE_ID);
	if(Status != XST_SUCCESS) return XST_FAILURE;

	XTmrCtr_SetHandler(&timer0, (XTmrCtr_Handler) TMR_Music_Handler, &TmrMusic);
	XTmrCtr_SetResetValue(&timer0, 0, MUSIC_RESET);
	XTmrCtr_SetOptions(&timer0, 0, XTC_INT_MODE_OPTION | XTC_AUTO_RELOAD_OPTION );

	Status = XTmrCtr_Initialize(&TmrMusic, TMR_DEVICE_ID);
	if(Status != XST_SUCCESS) return XST_FAILURE;

	XTmrCtr_SetHandler(&timer1, (XTmrCtr_Handler) TMR_Music_Handler, &TmrMusic);
	XTmrCtr_SetResetValue(&timer1, 0, MUSIC_RESET);
	XTmrCtr_SetOptions(&timer1, 0, XTC_INT_MODE_OPTION | XTC_AUTO_RELOAD_OPTION );



	Status = IntcInitFunction(INTC_DEVICE_ID,  &TmrMusic, &TmrScreen, &TmrDano);
	if(Status != XST_SUCCESS) return XST_FAILURE;



    xil_printf("TFT initialized \r\n");
    xil_printf("**********Init LCD**********\r\n");

    LCD_SCAN_DIR LCD_ScanDir = SCAN_DIR_DFT;
    LCD_Init(LCD_ScanDir);

    xil_printf("LCD Show \r\n");

    GUI_Show();
    delay_ms(100);
    LCD_Clear(GUI_BACKGROUND);
    GUI_INTRO();
    delay_ms(100);
    LCD_Clear(GUI_BACKGROUND);

    XGpio_SetDataDirection(&gpio1, POT1_pin, 0x00);
    XGpio_SetDataDirection(&gpio1, POT2_pin, 0x00);

    return XST_SUCCESS;
}


int IntcInitFunction(u16 DeviceId, XTmrCtr TmrInstancePtr, XTmrCtrTmrInstancePtr1, XTmrCtr TmrInstancePtr2)
{
    XScuGic_ConfigIntcConfig;
    int status;

    IntcConfig = XScuGic_LookupConfig(DeviceId);
    status = XScuGic_CfgInitialize(&INTC, IntcConfig, IntcConfig->CpuBaseAddress);
    if(status != XST_SUCCESS) return XST_FAILURE;

    status = InterruptSystemSetup(&INTC);
    if(status != XST_SUCCESS) return XST_FAILURE;

    XScuGic_SetPriorityTriggerType(&INTC, INTC_TMR_INTERRUPT_ID, 0x18, 0x1);
    XScuGic_SetPriorityTriggerType(&INTC, INTC_TMR_INTERRUPT_ID_1, 0x20, 0x1);
    XScuGic_SetPriorityTriggerType(&INTC, INTC_TMR_INTERRUPT_ID_2, 0x20, 0x1);

    status = XScuGic_Connect(&INTC,INTC_TMR_INTERRUPT_ID,(Xil_ExceptionHandler)TMR_Music_Handler,(void ) TmrInstancePtr);
    status = XScuGic_Connect(&INTC,INTC_TMR_INTERRUPT_ID_1,(Xil_ExceptionHandler)TMR_Screen_Handler,(void) TmrInstancePtr1);
    status = XScuGic_Connect(&INTC,INTC_TMR_INTERRUPT_ID_2,(Xil_ExceptionHandler)TMR_Dano_Handler,(void ) TmrInstancePtr2);

    if(status != XST_SUCCESS) return XST_FAILURE;

    XScuGic_Enable(&INTC, INTC_TMR_INTERRUPT_ID);
    XScuGic_Enable(&INTC, INTC_TMR_INTERRUPT_ID_1);
    XScuGic_Enable(&INTC, INTC_TMR_INTERRUPT_ID_2);

    return XST_SUCCESS;
}

int InterruptSystemSetup(XScuGicXScuGicInstancePtr)
{

    Xil_ExceptionRegisterHandler(XIL_EXCEPTION_ID_INT,
    (Xil_ExceptionHandler)XScuGic_InterruptHandler,
    XScuGicInstancePtr);

    Xil_ExceptionEnable();

    return XST_SUCCESS;

}
