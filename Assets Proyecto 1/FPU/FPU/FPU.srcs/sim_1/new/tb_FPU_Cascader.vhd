LIBRARY ieee;
USE ieee.std_logic_1164.ALL;

library work;
use work.fp32_pkg.std_array_32x64;

ENTITY tb_FPU_Cascader IS
END tb_FPU_Cascader;

ARCHITECTURE behavior OF tb_FPU_Cascader IS 

    -- Component Declaration for the Unit Under Test (UUT)
    COMPONENT FPU_Cascader
    PORT(
        input_ready : in std_logic;
        sample_vector: in std_logic_vector(2047 downto 0);
        fft_done: in std_logic;
        cos: in std_array_32x64;
        sin: in std_array_32x64;
        clk         : in  std_logic;
        rst         : in  std_logic;
        partial_done: out std_logic;
        final_sum   : out std_logic_vector(31 downto 0)
        );
    END COMPONENT;
   
   --Inputs
   signal input_ready : std_logic := '0';
   signal clk         : std_logic := '0';
   signal rst         : std_logic := '0';
   signal sample_vector: std_logic_vector(2047 downto 0):= (others => '0');
   signal fft_done: std_logic := '0';

   --Outputs
   signal final_sum   : std_logic_vector(31 downto 0);
   signal partial_done: std_logic;
   
   signal ieee_values_internal_1 : std_array_32x64 := (
    "01000000000000000000000000000000",
    "01000000000000000000000000000000",
    "01000000000000000000000000000000",
    "01000000000000000000000000000000",
    "01000000000000000000000000000000",
    "01000000000000000000000000000000",
    "01000000000000000000000000000000",
    "01000000000000000000000000000000",
    "01000000000000000000000000000000",
    "01000000000000000000000000000000",
    "01000000000000000000000000000000",
    "01000000000000000000000000000000",
    "01000000000000000000000000000000",
    "01000000000000000000000000000000",
    "01000000000000000000000000000000",
    "01000000000000000000000000000000",
    "01000000000000000000000000000000",
    "01000000000000000000000000000000",
    "01000000000000000000000000000000",
    "01000000000000000000000000000000",
    "01000000000000000000000000000000",
    "01000000000000000000000000000000",
    "01000000000000000000000000000000",
    "01000000000000000000000000000000",
    "01000000000000000000000000000000",
    "01000000000000000000000000000000",
    "01000000000000000000000000000000",
    "01000000000000000000000000000000",
    "01000000000000000000000000000000",
    "01000000000000000000000000000000",
    "01000000000000000000000000000000",
    "01000000000000000000000000000000",
    "01000000000000000000000000000000",
    "01000000000000000000000000000000",
    "01000000000000000000000000000000",
    "01000000000000000000000000000000",
    "01000000000000000000000000000000",
    "01000000000000000000000000000000",
    "01000000000000000000000000000000",
    "01000000000000000000000000000000",
    "01000000000000000000000000000000",
    "01000000000000000000000000000000",
    "01000000000000000000000000000000",
    "01000000000000000000000000000000",
    "01000000000000000000000000000000",
    "01000000000000000000000000000000",
    "01000000000000000000000000000000",
    "01000000000000000000000000000000",
    "01000000000000000000000000000000",
    "01000000000000000000000000000000",
    "01000000000000000000000000000000",
    "01000000000000000000000000000000",
    "01000000000000000000000000000000",
    "01000000000000000000000000000000",
    "01000000000000000000000000000000",
    "01000000000000000000000000000000",
    "01000000000000000000000000000000",
    "01000000000000000000000000000000",
    "01000000000000000000000000000000",
    "01000000000000000000000000000000",
    "01000000000000000000000000000000",
    "01000000000000000000000000000000",
    "01000000000000000000000000000000",
    "01000000000000000000000000000000"
    );
    

signal ieee_values_internal_2 : std_array_32x64 := (
    "01000000010000000000000000000000",
    "01000000010000000000000000000000",
    "01000000010000000000000000000000",
    "01000000010000000000000000000000",
    "01000000010000000000000000000000",
    "01000000010000000000000000000000",
    "01000000010000000000000000000000",
    "01000000010000000000000000000000",
    "01000000010000000000000000000000",
    "01000000010000000000000000000000",
    "01000000010000000000000000000000",
    "01000000010000000000000000000000",
    "01000000010000000000000000000000",
    "01000000010000000000000000000000",
    "01000000010000000000000000000000",
    "01000000010000000000000000000000",
    "01000000010000000000000000000000",
    "01000000010000000000000000000000",
    "01000000010000000000000000000000",
    "01000000010000000000000000000000",
    "01000000010000000000000000000000",
    "01000000010000000000000000000000",
    "01000000010000000000000000000000",
    "01000000010000000000000000000000",
    "01000000010000000000000000000000",
    "01000000010000000000000000000000",
    "01000000010000000000000000000000",
    "01000000010000000000000000000000",
    "01000000010000000000000000000000",
    "01000000010000000000000000000000",
    "01000000010000000000000000000000",
    "01000000010000000000000000000000",
    "01000000010000000000000000000000",
    "01000000010000000000000000000000",
    "01000000010000000000000000000000",
    "01000000010000000000000000000000",
    "01000000010000000000000000000000",
    "01000000010000000000000000000000",
    "01000000010000000000000000000000",
    "01000000010000000000000000000000",
    "01000000010000000000000000000000",
    "01000000010000000000000000000000",
    "01000000010000000000000000000000",
    "01000000010000000000000000000000",
    "01000000010000000000000000000000",
    "01000000010000000000000000000000",
    "01000000010000000000000000000000",
    "01000000010000000000000000000000",
    "01000000010000000000000000000000",
    "01000000010000000000000000000000",
    "01000000010000000000000000000000",
    "01000000010000000000000000000000",
    "01000000010000000000000000000000",
    "01000000010000000000000000000000",
    "01000000010000000000000000000000",
    "01000000010000000000000000000000",
    "01000000010000000000000000000000",
    "01000000010000000000000000000000",
    "01000000010000000000000000000000",
    "01000000010000000000000000000000",
    "01000000010000000000000000000000",
    "01000000010000000000000000000000",
    "01000000010000000000000000000000",
    "01000000010000000000000000000000"
);
   

   -- Clock period definitions
   constant clk_period : time := 8 ns;

BEGIN

    -- Instantiate the Unit Under Test (UUT)
   uut: FPU_Cascader PORT MAP (
          input_ready => input_ready,
          clk => clk,
          rst => rst,
          cos => ieee_values_internal_1,
          sin => ieee_values_internal_2,
          final_sum => final_sum,
          sample_vector => sample_vector,
          partial_done => partial_done,
          fft_done => fft_done
        );

   -- Clock process definitions
   clk_process :process
   begin
		clk <= '0';
		wait for clk_period/2;
		clk <= '1';
		wait for clk_period/2;
   end process;

   -- Stimulus process
   stim_proc: process
   begin		
      
      sample_vector (31 downto 0) <= "01000000010000000000000000000000";
      wait for 5*65*clk_period;
      input_ready <= '1';
      wait for 3*clk_period;
      input_ready <= '0';
      wait for 10000*clk_period;
      fft_done <= '1';
      wait for 50*clk_period;
      fft_done <= '0';
      input_ready <= '1';
      
      
      wait;
   end process;

END;
