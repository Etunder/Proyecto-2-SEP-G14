/******************************************************************************
* Copyright (C) 2019 - 2020 Xilinx, Inc.  All rights reserved.
* SPDX-License-Identifier: MIT
******************************************************************************/

/***************************** Include Files *********************************/
#include "xparameters.h"
#include "xsdps.h"
#include "xil_printf.h"
#include "xuartps.h"  /* UART device driver */
#include "ff.h"      /* FAT file system library */
#include "xil_cache.h"

/************************** Constant Definitions *****************************/
#define UART_DEVICE_ID  XPAR_XUARTPS_0_DEVICE_ID
#define SD_DEVICE_ID    XPAR_XSDPS_0_DEVICE_ID
#define MAX_BUFF_SIZE   1024

/**************************** Type Definitions *******************************/

/***************** Macros (Inline Functions) Definitions *********************/

/************************** Function Prototypes ******************************/
static int SdInit(void);
static int UartInit(void);
static int ListAndReadFilesOnSD(void);

/************************** Variable Definitions *****************************/

XUartPs Uart_Ps; /* Instance of the UART Device */
XSdPs SdInstance; /* Instance of the SD Device */

/*****************************************************************************/
/**
*
* Main function to call the SD example.
*
* @param	None
*
* @return	XST_SUCCESS if successful, otherwise XST_FAILURE.
*
* @note		None
*
******************************************************************************/
int main(void)
{
	int Status;

	Status = UartInit();
	if (Status != XST_SUCCESS) {
		xil_printf("UART Initialization failed \r\n");
		return XST_FAILURE;
	}

	Status = SdInit();
	if (Status != XST_SUCCESS) {
		xil_printf("SD Initialization failed \r\n");
		return XST_FAILURE;
	}

	Status = ListAndReadFilesOnSD();
	if (Status != XST_SUCCESS) {
		xil_printf("Failed to list and read files on SD card \r\n");
		return XST_FAILURE;
	}

	xil_printf("Successfully listed and read files on SD card \r\n");

	return XST_SUCCESS;
}

/*****************************************************************************/
/**
*
* This function initializes the UART.
*
* @param	None
*
* @return	XST_SUCCESS if successful, otherwise XST_FAILURE.
*
* @note		None
*
******************************************************************************/
static int UartInit(void)
{
	int Status;
	XUartPs_Config *Config;

	Config = XUartPs_LookupConfig(UART_DEVICE_ID);
	if (NULL == Config) {
		return XST_FAILURE;
	}

	Status = XUartPs_CfgInitialize(&Uart_Ps, Config, Config->BaseAddress);
	if (Status != XST_SUCCESS) {
		return XST_FAILURE;
	}

	/* Perform a self-test to check hardware build */
	Status = XUartPs_SelfTest(&Uart_Ps);
	if (Status != XST_SUCCESS) {
		return XST_FAILURE;
	}

	/* Set UART in Normal mode */
	XUartPs_SetOperMode(&Uart_Ps, XUARTPS_OPER_MODE_NORMAL);

	return XST_SUCCESS;
}

/*****************************************************************************/
/**
*
* This function initializes the SD card.
*
* @param	None
*
* @return	XST_SUCCESS if successful, otherwise XST_FAILURE.
*
* @note		None
*
******************************************************************************/
static int SdInit(void)
{
	int Status;
	XSdPs_Config *SdConfig;

	SdConfig = XSdPs_LookupConfig(SD_DEVICE_ID);
	if (NULL == SdConfig) {
		return XST_FAILURE;
	}

	Status = XSdPs_CfgInitialize(&SdInstance, SdConfig, SdConfig->BaseAddress);
	if (Status != XST_SUCCESS) {
		return XST_FAILURE;
	}

	Status = XSdPs_CardInitialize(&SdInstance);
	if (Status != XST_SUCCESS) {
		return XST_FAILURE;
	}

	return XST_SUCCESS;
}

/*****************************************************************************/
/**
*
* This function lists all files on the SD card and reads their contents.
*
* @param	None
*
* @return	XST_SUCCESS if successful, otherwise XST_FAILURE.
*
* @note		None
*
******************************************************************************/
static int ListAndReadFilesOnSD(void)
{
	FRESULT Res;
	FATFS FatFs;
	DIR Dir;
	FILINFO Finfo;
	FIL Fil;
	TCHAR *Path = "0:/";
	char Buff[MAX_BUFF_SIZE];
	UINT BytesRead;

	/* Register volume work area, initialize device */
	Res = f_mount(&FatFs, Path, 0);
	if (Res != FR_OK) {
		return XST_FAILURE;
	}

	/* Open the directory */
	Res = f_opendir(&Dir, Path);
	if (Res != FR_OK) {
		return XST_FAILURE;
	}

	/* List all files and directories in the root directory */
	xil_printf("Listing files in directory: %s\r\n", Path);
	for (;;) {
		Res = f_readdir(&Dir, &Finfo); /* Read a directory item */
		if (Res != FR_OK || Finfo.fname[0] == 0) break; /* Break on error or end of directory */
		if (Finfo.fattrib & AM_DIR) {
			xil_printf("Directory: %s\r\n", Finfo.fname);
		} else {
			xil_printf("File: %s (Size: %lu bytes)\r\n", Finfo.fname, Finfo.fsize);

			/* Open the file */
			Res = f_open(&Fil, Finfo.fname, FA_READ);
			if (Res != FR_OK) {
				xil_printf("Failed to open file: %s\r\n", Finfo.fname);
				continue;
			}

			/* Read and print the file content */
			xil_printf("Content of %s:\r\n", Finfo.fname);
			do {
				Res = f_read(&Fil, Buff, sizeof(Buff)-1, &BytesRead);
				if (Res != FR_OK) {
					xil_printf("Failed to read file: %s\r\n", Finfo.fname);
					break;
				}
				Buff[BytesRead] = '\0'; /* Null-terminate the buffer */
				xil_printf("%s", Buff);
			} while (BytesRead > 0);

			xil_printf("\r\n");

			/* Close the file */
			f_close(&Fil);
		}
	}

	/* Close the directory */
	f_closedir(&Dir);

	/* Unmount the volume */
	f_mount(NULL, Path, 0);

	return XST_SUCCESS;
}
