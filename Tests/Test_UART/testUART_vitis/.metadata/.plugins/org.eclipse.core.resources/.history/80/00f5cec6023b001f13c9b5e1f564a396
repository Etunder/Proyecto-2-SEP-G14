/******************************************************************************
* Copyright (C) 2019 - 2020 Xilinx, Inc.  All rights reserved.
* SPDX-License-Identifier: MIT
******************************************************************************/

/***************************** Include Files *********************************/
#include "xparameters.h"
#include "xsdps.h"
#include "xil_printf.h"
#include "xuartps.h"  /* UART device driver */
#include "ff.h"       /* FAT file system library */
#include "xil_cache.h"

/************************** Constant Definitions *****************************/
#define UART_DEVICE_ID  XPAR_XUARTPS_0_DEVICE_ID
#define SD_DEVICE_ID    XPAR_XSDPS_0_DEVICE_ID
#define MAX_BUFF_SIZE   1024
#define FILENAME        "Cancion.txt"
#define PRINT_CHUNK_SIZE 32

/**************************** Type Definitions *******************************/

/***************** Macros (Inline Functions) Definitions *********************/

/************************** Function Prototypes ******************************/
static int SdInit(void);
static int UartInit(void);
static int ReadFileFromSD(const char* Filename, char* Buffer, UINT BufferSize);

/************************** Variable Definitions *****************************/

XUartPs Uart_Ps; /* Instance of the UART Device */
XSdPs SdInstance; /* Instance of the SD Device */
char FileContent[MAX_BUFF_SIZE]; /* Array to hold file content */

/*****************************************************************************/
/**
*
* Main function to call the SD example.
*
* @param	None
*
* @return	XST_SUCCESS if successful, otherwise XST_FAILURE.
*
* @note		None
*
******************************************************************************/
int main(void)
{
	int Status;

	Status = UartInit();
	if (Status != XST_SUCCESS) {
		xil_printf("UART Initialization failed \r\n");
		return XST_FAILURE;
	}

	Status = SdInit();
	if (Status != XST_SUCCESS) {
		xil_printf("SD Initialization failed \r\n");
		return XST_FAILURE;
	}

	Status = ReadFileFromSD(FILENAME, FileContent, MAX_BUFF_SIZE);
	if (Status != XST_SUCCESS) {
		xil_printf("Failed to read file from SD card \r\n");
		return XST_FAILURE;
	}

	xil_printf("Successfully read file from SD card \r\n");
	xil_printf("Content of %s:\r\n%s\r\n", FILENAME, FileContent);

	/* Print the first and last 32 items of the array */
	if (FileContent[0] != '\0') {
		xil_printf("First %d characters: ", PRINT_CHUNK_SIZE);
		for (int i = 0; i < PRINT_CHUNK_SIZE && FileContent[i] != '\0'; i++) {
			xil_printf("%c", FileContent[i]);
		}
		xil_printf("\r\n");

		/* Find the total length of the content */
		int totalLength = 0;
		while (FileContent[totalLength] != '\0') {
			totalLength++;
		}

		if (totalLength > 0) {
			xil_printf("Last %d characters: ", PRINT_CHUNK_SIZE);
			for (int i = totalLength - PRINT_CHUNK_SIZE; i < totalLength; i++) {
				if (i >= 0) {
					xil_printf("%c", FileContent[i]);
				}
			}
			xil_printf("\r\n");
		}
	} else {
		xil_printf("File is empty.\r\n");
	}

	return XST_SUCCESS;
}

/*****************************************************************************/
/**
*
* This function initializes the UART.
*
* @param	None
*
* @return	XST_SUCCESS if successful, otherwise XST_FAILURE.
*
* @note		None
*
******************************************************************************/
static int UartInit(void)
{
	int Status;
	XUartPs_Config *Config;

	Config = XUartPs_LookupConfig(UART_DEVICE_ID);
	if (NULL == Config) {
		return XST_FAILURE;
	}

	Status = XUartPs_CfgInitialize(&Uart_Ps, Config, Config->BaseAddress);
	if (Status != XST_SUCCESS) {
		return XST_FAILURE;
	}

	/* Perform a self-test to check hardware build */
	Status = XUartPs_SelfTest(&Uart_Ps);
	if (Status != XST_SUCCESS) {
		return XST_FAILURE;
	}

	/* Set UART in Normal mode */
	XUartPs_SetOperMode(&Uart_Ps, XUARTPS_OPER_MODE_NORMAL);

	return XST_SUCCESS;
}

/*****************************************************************************/
/**
*
* This function initializes the SD card.
*
* @param	None
*
* @return	XST_SUCCESS if successful, otherwise XST_FAILURE.
*
* @note		None
*
******************************************************************************/
static int SdInit(void)
{
	int Status;
	XSdPs_Config *SdConfig;

	SdConfig = XSdPs_LookupConfig(SD_DEVICE_ID);
	if (NULL == SdConfig) {
		return XST_FAILURE;
	}

	Status = XSdPs_CfgInitialize(&SdInstance, SdConfig, SdConfig->BaseAddress);
	if (Status != XST_SUCCESS) {
		return XST_FAILURE;
	}

	Status = XSdPs_CardInitialize(&SdInstance);
	if (Status != XST_SUCCESS) {
		return XST_FAILURE;
	}

	return XST_SUCCESS;
}

/*****************************************************************************/
/**
*
* This function reads a specific file from the SD card and stores its content in a buffer.
*
* @param	Filename is the name of the file to read.
* @param	Buffer is the array to store the file content.
* @param	BufferSize is the size of the buffer.
*
* @return	XST_SUCCESS if successful, otherwise XST_FAILURE.
*
* @note		None
*
******************************************************************************/
static int ReadFileFromSD(const char* Filename, char* Buffer, UINT BufferSize)
{
	FRESULT Res;
	FATFS FatFs;
	FIL Fil;
	TCHAR *Path = "0:/";
	UINT BytesRead;
	UINT TotalBytesRead = 0;

	/* Register volume work area, initialize device */
	Res = f_mount(&FatFs, Path, 0);
	if (Res != FR_OK) {
		return XST_FAILURE;
	}

	/* Open the file */
	Res = f_open(&Fil, Filename, FA_READ);
	if (Res != FR_OK) {
		return XST_FAILURE;
	}

	/* Read the file content into the buffer */
	do {
		Res = f_read(&Fil, Buffer + TotalBytesRead, BufferSize - TotalBytesRead - 1, &BytesRead);
		if (Res != FR_OK) {
			f_close(&Fil);
			return XST_FAILURE;
		}
		TotalBytesRead += BytesRead;
	} while (BytesRead > 0 && TotalBytesRead < BufferSize - 1);

	/* Null-terminate the buffer */
	Buffer[TotalBytesRead] = '\0';

	/* Close the file */
	f_close(&Fil);

	/* Unmount the volume */
	f_mount(NULL, Path, 0);

	return XST_SUCCESS;
}
